name: CI/CD Workflow

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  # Frontend Job
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache frontend Node.js dependencies
        uses: actions/cache@v3
        with:
          path: frontend/business-travel-frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/business-travel-frontend/**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies for frontend with legacy-peer-deps
        run: |
          cd frontend/business-travel-frontend
          npm install --legacy-peer-deps

      - name: Run frontend unit tests
        run: |
          cd frontend/business-travel-frontend
          npm run test

      - name: Build frontend app
        run: |
          cd frontend/business-travel-frontend
          npm run build

      - name: Save frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/business-travel-frontend/dist
          retention-days: 1

  # Backend Job
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for backend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache backend Node.js dependencies
        uses: actions/cache@v3
        with:
          path: backend/business-travel-backend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('backend/business-travel-backend/**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies for backend
        run: |
          cd backend/business-travel-backend
          npm install

      - name: Run backend unit tests
        run: |
          cd backend/business-travel-backend
          npm run test

  # Docker Build and Push Job
  docker:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/business-travel-frontend/dist

      - name: Determine Docker tag
        id: docker_tag
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "tag=dev" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "production" ]]; then
            echo "tag=prod" >> $GITHUB_ENV
          else
            echo "Invalid branch: ${GITHUB_REF_NAME}. Exiting."
            exit 1
          fi

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/business-travel-backend:${{ env.tag }} ./backend/business-travel-backend

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/business-travel-backend:${{ env.tag }}

  # Deployment Job
  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    environment:
      name: ${{ github.ref_name == 'main' && 'Development' || github.ref_name == 'production' && 'Production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Environment
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "Deploying to Development"
            # Add deployment commands for Development
          elif [[ "${GITHUB_REF_NAME}" == "production" ]]; then
            echo "Deploying to Production"
            # Add deployment commands for Production
          else
            echo "Invalid branch: ${GITHUB_REF_NAME}. Exiting."
            exit 1
          fi
